INSTRUCTIONS
Using the full set of code that I provided, please provide a comprehensive and critical code review using the specification and code review checklist below. Your output should address each point in the checklist with specific, detailed feedback about how the code meets or fails to meet each requirement. The review must be thorough and precise, with no ambiguity or suggestions. The focus is on identifying issues and providing a cut-throat analysis.

Specification
The application is a point-of-sale tool for a store, like Home Depot, that rents big tools. Customers rent a tool for a specified number of days. When a customer checks out a tool, a Rental Agreement is produced. The store charges a daily rental fee, whose amount is different for each tool type. Some tools are free of charge on weekends or holidays. Clerks may give customers a discount that is applied to the total daily charges to reduce the final charge.

Rules for considering Holidays in calculation
There are only two (2) holidays in the calendar:

Independence Day, July 4th - If falls on weekend, it is observed on the closest weekday (if Sat, then Friday before, if Sunday, then Monday after)
Labor Day - First Monday in September
Metadata

Tool Code - Unique identifier for a tool instance.
Tool Type - The type of tool. The type also specifies the daily rental charge, and the days for which the daily rental charge applies.
Brand - The brand of the ladder, chain saw or jackhammer.
Use Case 1
Checkout

Checkout requires the following information to be provided:
Tool code - See tool table above
Rental day count - The number of days for which the customer wants to rent the tool. (e.g. 4 days)
Discount percent - As a whole number, 0-100 (e.g. 20 = 20%)
Check out date
Use Case 2
Checkout should throw an exception with an instructive, user-friendly message if:

Rental day count is not 1 or greater
Discount percent is not in the range 0-100
Use Case 3
Checkout generates a Rental Agreement instance with the following values:

Tool code - Specified at checkout
Tool type - From tool info
Tool brand - From tool info
Rental days - Specified at checkout
Check out date - Specified at checkout
Due date - Calculated from checkout date and rental days.
Daily rental charge - Amount per day, specified by the tool type.
Charge days - Count of chargeable days, from day after checkout through and including due date, excluding no charge days as specified by the tool type.
Pre-discount charge - Calculated as charge days X daily charge. Resulting total rounded half up to cents.
Discount percent - Specified at checkout.
Discount amount - Calculated from discount % and pre-discount charge. Resulting amount rounded half up to cents.
Final charge - Calculated as pre-discount charge - discount amount.
Use Case 4
Rental Agreement should include a method that can print the above values as text to the console like this:

Tool code: LADW
Tool type: Ladder
Final charge: $9.99
with formatting as follows:

Date mm/dd/yy
Currency $9,999.99
Percent 99%
Master Data

ToolCode ToolType   Brand
CHNS     Chainsaw   Stihl
LADW     Ladder     Werner
JAKD     Jackhammer DeWalt
JAKR     Jackhammer Ridgid

Dailycharge WeekDayCharge Weekendcharge holidaycharge
Ladder      $1.99         Yes           Yes          No
Chainsaw    $1.49         Yes           No           Yes
Jackhammer  $2.99         Yes           No           No
Code must include JUnits to prove solution is correct. The proof should include the following scenarios:

Test1  Test2  Test3  Test4  Test5  Test6
Tool code     JAKR   LADW   CHNS   JAKD   JAKR   JAKR
Checkout date 9/3/2015 7/2/2020 7/2/2015 9/3/2015 7/2/2015 7/2/2020
Rental days   5     3     5     6     9     4
Discount      101%  10%   25%   0%    0%    50%
CODE REVIEW CHECKLIST

Input Validation:

Ensure that the tool code provided is valid and exists in the tool table.
Check for validations ensuring that the rental day count is 1 or more.
Confirm validations for the discount percent are in place (must be in the range 0-100).
Comprehensive Functionality and Logic:

Verify due date calculation - it must be correctly computed from the checkout date and the rental days.
Ensure correct daily charges based on the type of tool and the respective charge rates.
Verify that the logic for "no charge" days covers both weekends and holidays as per the defined rules. Make sure tool-specific rules are taken into account.
Confirm that the discount logic correctly calculates pre-discount charges, discount amount, and the final charge. Check for correct rounding off to cents.
Rental Agreement:

Check that a Rental Agreement instance is generated as required with all necessary details: tool code, tool type, rental days, checkout date, due date, charge details and charges.
Verify the accuracy of each entry in the Rental Agreement.
Error Handling:

Verify user-friendly messages for invalid inputs and other exceptions.
Print Functionality:

Check the function that prints the rental agreement to the console. It should display all the expected details in the correct format.
Code Quality (S.O.L.I.D Principles):

Review the code for clarity: it should be easy to read, understand, and maintain.
Check usage of meaningful variable and method names.
Look for code efficiency: the solution should not do unnecessary computations.
Check for consistent indentation and spacing.
Single Responsibility: Each function or module in the code should ideally have one job.
Open-Closed: The code should be open for extension (in case of new tool types or holiday rules) but closed for modifications.
Liskov's Substitution: If the codebase has classes and they share a hierarchy, parent classes should be easily replaceable with child classes without affecting functionality.
Interface Segregation: Should have multiple specific interfaces instead of a single general-purpose interface, in case interfaces are used.
Dependency Inversion: High-level modules should not depend directly on low-level modules. Both should depend on abstractions.
Unit Testing:

The unit tests should cover all methods and functions of the application. Edge cases should be included in these tests.
Check specificity of test cases. Each test should focus on one functionality or scenario.
Review whether mock objects are used suitably for isolating the method being tested.
Unit test names should clearly state what each test does.
Confirm that required test scenarios mentioned in the assignment are covered, including tests on the boundary values of discount percent and rental day count.
Additional Coding Best Practices:

Look for code comments that provide clarity on the logic especially for complex parts of the code.
Check for the reuse of code. Code duplication should be avoided.
Confirm if the code follows the naming conventions for methods, variables and classes.
The code should handle null values to avoid NullPointerExceptions.
The code should have consistent indentation and spacing.
Application:

Verify application is compiling without any code errors
Verify if the functionality requested is achieved
Verify if Unit Tests are executing and providing results as expected
Hints

Perform code analysis based on specification, use cases, and rules.
Use the CODE REVIEW CHECKLIST detailed out by each section and provide feedback for each of it in the output.
Provide the results if the code met the requested specification and issues.
Do not put any special characters in the output.
Use Markdown format.
Output should be structured with an overall quality assessment of the code, stating whether the code "meets expectations" or "does not meet expectations."
Output should include a code review checklist summary at the top, followed by detailed feedback along with check mark for passed/failed for each item in the code review checklist.

**Code:**
```java
@@INPUT1@@